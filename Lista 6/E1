#include <iostream> // Inclui a biblioteca padrão de entrada e saída.
#include <string>   // Inclui a biblioteca de manipulação de strings.

using namespace std; // Utiliza o namespace std para evitar escrever std:: antes de cada comando.

int main() { // Função principal do programa.
    string linha; // Declara uma variável do tipo string chamada 'linha'.
    
    while (getline(cin, linha)) { // Lê uma linha da entrada padrão (geralmente o teclado) e armazena em 'linha'. Continua enquanto houver linhas para ler.
        bool italico = false; // Declara uma variável booleana para controlar o estado do itálico.
        bool negrito = false; // Declara uma variável booleana para controlar o estado do negrito.
        string result; // Declara uma variável do tipo string para armazenar o resultado formatado.
        
        for (size_t i = 0; i < linha.size(); ++i) { // Itera sobre cada caractere da string 'linha'.
            char c = linha[i]; // Armazena o caractere atual em 'c'.
            if (c == '_') { // Verifica se o caractere é um sublinhado '_'.
                if (italico) { // Se 'italico' é verdadeiro, fecha a tag de itálico.
                    result += "</i>";
                } else { // Caso contrário, abre a tag de itálico.
                    result += "<i>";
                }
                italico = !italico; // Alterna o estado de 'italico'.
            } else if (c == '*') { // Verifica se o caractere é um asterisco '*'.
                if (negrito) { // Se 'negrito' é verdadeiro, fecha a tag de negrito.
                    result += "</b>";
                } else { // Caso contrário, abre a tag de negrito.
                    result += "<b>";
                }
                negrito = !negrito; // Alterna o estado de 'negrito'.
            } else { // Se o caractere não é nem '_' nem '*', simplesmente adiciona o caractere ao resultado.
                result += c;
            }
        }
        
        cout << result << endl; // Imprime a string resultante formatada.
    }
    return 0; // Retorna 0 para indicar que o programa terminou com sucesso.
}
